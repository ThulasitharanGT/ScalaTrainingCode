package com.learning.basics

/*Comprehensions have the form for (enumerators) yield e,
enumerators : semicolon-separated list of enumerators.
An enumerator is either a generator which introduces new variables, or it is a filter.
A comprehension evaluates the body e
for each binding generated by the enumerators and returns a sequence of these values.*/
case class User(val name: String, val age: Int)
//Multiple Opertions
//Every datatype that supports the operations withFilter, map, and flatMap have comprehension
object Comprehensions_17 extends App{
  val userBase = List(new User("Travis", 28),
    new User("Kelly", 33),
    new User("Jennifer", 44),
    new User("Dennis", 23))
  //user <- userBase is generator
  // Guard : if (user.age >=20 && user.age < 30)
  // yield creates a List[String
  val twentySomethings = for (user <- userBase if (user.age >=20 && user.age < 30))
    yield user.name  // i.e. add this to a list
  twentySomethings.foreach(name => println(name))  // prints Travis Dennis

  def foo(n: Int, v: Int) =
    for (i <- 0 until n;
         j <- i until n if i + j == v)
      yield (i, j)
  foo(10, 10) foreach {
    case (i, j) =>
      print(s"($i, $j) ")  // prints (1, 9) (2, 8) (3, 7) (4, 6) (5, 5)
  }
}
